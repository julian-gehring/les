#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass literate-article
\begin_preamble
%\VignetteIndexEntry{Detection of Loci of Enhanced Significance (LES) in tiling array data with the les package}
%\VignettePackage{les}

\usepackage{fancyvrb}
\fvset{listparameters={\setlength{\topsep}{0pt}}}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\end_preamble
\use_default_options false
\language english
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Introduction to the les package:
\begin_inset Newline newline
\end_inset

Loci of Enhanced Significance in Tiling Array Data
\end_layout

\begin_layout Author
Julian Gehring
\end_layout

\begin_layout Abstract
In this vignette we describe using the les package for finding Loci of Enhanced
 Significance (LES) in tiling microarray data.
 With an example of a general framework we illustrate how to apply the package
 for exploring regions of regulation in differential expression and chip-CHIP
 analysis.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Tiling microarrays have become an important platform for the investigation
 of regulation in expression and DNA-protein interaction.
 They provide a relatively unbiased tool covering large regions of interest
 in the genome.
\end_layout

\begin_layout Standard
Beside the analysis of single microarrays the investigation of differential
 effects between experimental conditions is critical for current research.
 A common approach consists in applying statistical tests on the level of
 single probes and thereby computing p-values for each probe independently.
 Since the targets of such experiments cover areas with several probes the
 logical next step involves combining information from neighboring probes
 into a reasonable statistic.
 In regions with differential effects the test statistics change their distribut
ion and are referred to as Loci of Enhanced Significance (LES).
 The changes in the test statistics depend on the underlying test applied.
\end_layout

\begin_layout Standard
The les package provides the ability to detect such LES independent of the
 underlying statistical test and can therefore be used for a wide range
 of applications.
 This vignette illustrates how to LES can be found in tiling microarray
 data sets.
\end_layout

\begin_layout Scrap
<<echo=false>>=
\begin_inset Newline newline
\end_inset

options(width=70)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Data and statistics on probe level
\end_layout

\begin_layout Standard
For this analysis we will use a simulated data set describing differential
 expression between two conditions.
 It contains 1000 probes with 3 chips each for the conditions treatment
 and control.
 The expression values are stored in an expression set.
 We will extract the position of the probes, the conditions of the samples
 and the expression values.
 There are two regions with changes present in the data, each being 50 bp
 long.
\end_layout

\begin_layout Scrap
<<loadData>>=
\begin_inset Newline newline
\end_inset

library(les)
\begin_inset Newline newline
\end_inset

library(Biobase)
\begin_inset Newline newline
\end_inset

data(simTile)
\begin_inset Newline newline
\end_inset

treatment <- as.factor(phenoData(simTile)$condition == "treatment")
\begin_inset Newline newline
\end_inset

pos <- featureData(simTile)$position
\begin_inset Newline newline
\end_inset

exprs <- exprs(simTile)
\begin_inset Newline newline
\end_inset

regions <- c(100, 150, 600, 650)
\begin_inset Newline newline
\end_inset

cols <- rep(c("lightblue3", "lightgreen"), each=2)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Next we have a look at the expression values.
\end_layout

\begin_layout Scrap
<<plotExpressionValues, fig=TRUE, echo=TRUE>>=
\begin_inset Newline newline
\end_inset

matplot(exprs, pch=".", xlab="Probe position", ylab="Expression")
\begin_inset Newline newline
\end_inset

abline(v=regions, col=cols)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
In the next step we will compute the statistics of changes between the two
 conditions for each probe.
 Since the sample size as for most tiling microarray experiments is small
 we will use a modified t-test provided by the limma package.
\end_layout

\begin_layout Standard
We will also plot the p-values against the probe positions.
 By looking at the raw p-values it may be hard to detect the LES.
\end_layout

\begin_layout Scrap
<<estimateProbeLevelStatistics>>=
\begin_inset Newline newline
\end_inset

library(limma)
\begin_inset Newline newline
\end_inset

design <- cbind(mean=1, diff=treatment)
\begin_inset Newline newline
\end_inset

fit <- lmFit(exprs, design)
\begin_inset Newline newline
\end_inset

fit <- eBayes(fit)
\begin_inset Newline newline
\end_inset

pval <- as.numeric(fit$p.value[, "diff"])
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<plotProbeLevelStatistics, fig=TRUE, echo=TRUE>>=
\begin_inset Newline newline
\end_inset

plot(pos, pval, pch=20, xlab="Probe position", ylab="P-value")
\begin_inset Newline newline
\end_inset

abline(v=regions, col=cols)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Incorporation information from neighboring p-values to find LES
\end_layout

\begin_layout Standard
In any well designed tiling array experiments the potential targets will
 cover several neighboring probes.
 Thereby neighboring p-values should contain mutual information and incorporatio
n of such will be beneficial.
\end_layout

\begin_layout Standard
In the les package this in done in the following manner: For each probe
 
\begin_inset Formula $i$
\end_inset

 the the surrounding p-values get weights assigned by some windowing function.
 A weighted cumulative density is then computed and the fraction of significant
 p-values is estimated by iterative linear fitting.
 The method is based on the fact that p-values under the null hypothesis
 
\begin_inset Formula $H_{0}$
\end_inset

 are from a uniform distribution whereas p-values violating 
\begin_inset Formula $H_{0}$
\end_inset

 are shifted towards smaller values.
 This results in the index 
\begin_inset Formula $\Lambda_{i}$
\end_inset

 which measures the fraction of p-values violating 
\begin_inset Formula $H_{0}$
\end_inset

 and therefore the degree of regulation in the local surrounding.
 It should be noted that this approach is closely related to the estimation
 of a false discovery rate and 
\begin_inset Formula $\Lambda_{i}$
\end_inset

 can be interpreted as locally weighted version of such.
\end_layout

\begin_layout Standard
For the analysis we will first pass our data to an object of class Les.
 The only data required are the position of the probes, the corresponding
 p-values from the statistical test and optionally their chromosomal location.
\end_layout

\begin_layout Standard
Then we can compute our first estimate of 
\begin_inset Formula $\Lambda_{i}$
\end_inset

 for which we have to specify a window size.
 The power of the detection will be maximal if the size of the window matches
 the size of the target.
 In many experiments one has a rough prior knowledge on the target size
 which will be sufficient of the first step.
 Later we will discuss an approach the estimate the optimal window size
 from the data itself.
 Here we will chose a small window size to start with.
\end_layout

\begin_layout Scrap
<<createLes>>=
\begin_inset Newline newline
\end_inset

res <- create(pos, pval)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
By default a triangular weighting function will be chosen.
 We can also take a rectangular window or write our own function and pass
 it via the weighting argument.
 We can further on specify whether we want to include the Grenander correction
 for the cumulative density or use multicore processing on some platforms.
\end_layout

\begin_layout Scrap
<<estimateLes>>=
\begin_inset Newline newline
\end_inset

win <- 30
\begin_inset Newline newline
\end_inset

res <- estimate(res, win)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
All data, results and parameters are stored in the object which is in our
 case called res.
 We can get a short summary on the results by calling res or by plotting
 it.
\end_layout

\begin_layout Scrap
<<showPlotLes, fig=TRUE, echo=TRUE>>=
\begin_inset Newline newline
\end_inset

res
\begin_inset Newline newline
\end_inset

plot(res)
\begin_inset Newline newline
\end_inset

abline(v=regions, col=cols)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
For comparison we will analyze and plot the same data with a different window
 size.
 This allows us to explore our data set.
\end_layout

\begin_layout Scrap
<<estimateLes2>>=
\begin_inset Newline newline
\end_inset

win2 <- 50
\begin_inset Newline newline
\end_inset

res <- estimate(res, win2)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<showPlotLes2, fig=TRUE, echo=TRUE>>=
\begin_inset Newline newline
\end_inset

res
\begin_inset Newline newline
\end_inset

plot(res)
\begin_inset Newline newline
\end_inset

abline(v=regions, col=cols)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
We can already see two distinct peaks that correspond to the regions of
 simulated regulation.
\end_layout

\begin_layout Section
Parameter estimation from the data
\end_layout

\begin_layout Standard
To turn the continuous 
\begin_inset Formula $\Lambda_{i}$
\end_inset

 into regions of interest we have to define a threshold 
\begin_inset Formula $\Theta$
\end_inset

.
 It can be derived from the data by estimating the number of probes with
 a significant effect 
\begin_inset Formula $R$
\end_inset

 on the whole array.
 Then 
\begin_inset Formula $\Theta$
\end_inset

 can be chosen such that 
\begin_inset Formula $\mid\Lambda_{i}\geq\Theta\mid=R$
\end_inset

.
 The content of any slot can be accessed by using the [ function.
\end_layout

\begin_layout Scrap
<<cutoff>>=
\begin_inset Newline newline
\end_inset

res <- cutoff(res, grenander=TRUE, verbose=TRUE)
\begin_inset Newline newline
\end_inset

res["nSigProbes"]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Based on 
\begin_inset Formula $\Theta$
\end_inset

 we can search for regions that have a continuous 
\begin_inset Formula $\Lambda_{i}\geq\Theta$
\end_inset

.
 The regions function takes by default the estimated 
\begin_inset Formula $\hat{\Theta}$
\end_inset

 as shown before.
 We can also pass our own 
\begin_inset Formula $\Theta$
\end_inset

.
 Further restrictions can be imposed on the regions search such as the minimal
 length of a region and the maximum gap allowed between probes of one region.
\end_layout

\begin_layout Scrap
<<regions>>=
\begin_inset Newline newline
\end_inset

theta <- 0.3
\begin_inset Newline newline
\end_inset

res <- regions(res, limit=theta)
\begin_inset Newline newline
\end_inset

res["regions"]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The optimal window for a region can be estimated using a leave-one-out cross
 validation.
 This approach can be used to optimize the window size parameter for each
 region seperately in a second step.
\end_layout

\begin_layout Scrap
<<chi2, fig=FALSE, echo=TRUE>>=
\begin_inset Newline newline
\end_inset

winSize <- seq(10, 100, by=10)
\begin_inset Newline newline
\end_inset

reg2 <- matrix(c(500, 700), nrow=1)
\begin_inset Newline newline
\end_inset

#chi2 <- optimalKernel(res, winSize, reg2)
\begin_inset Newline newline
\end_inset

#plot(winSize, chi2, type="b")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Calculation of confidence intervals
\end_layout

\begin_layout Standard
In some cases it is also useful to provide confidence (CI) intervals for
 
\begin_inset Formula $\Lambda_{i}$
\end_inset

.
 These are computed by bootstrapping the probes in the window.
 Since bootstrapping is by its nature computationally demanding and CI are
 primarily interesting in regions of interest it it possible to compute
 CI for a subset of probes.
\end_layout

\begin_layout Scrap
<<ci>>=
\begin_inset Newline newline
\end_inset

subset <- pos >= 580 & pos <= 670
\begin_inset Newline newline
\end_inset

#res <- ci(res, subset)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<plotCi, fig=TRUE, echo=TRUE>>=
\begin_inset Newline newline
\end_inset

#plot(res, error="ci", limit=theta, xlim=c(580, 670))
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The two RDEs can clearly be detected.
\begin_inset Newline newline
\end_inset

Now look at the second RDE and plot also the 0.95 CIs.
\end_layout

\begin_layout Section
Specification of own window functions
\end_layout

\begin_layout Standard
With the triangWeight and rectangWeight two window functions are already
 include in the les package.
 We can also specifiy own window functions and pass it via the weighting
 argument in the estimate function.
 The have to be given in the following format:
\end_layout

\begin_layout Scrap
<<weightFcn>>=
\begin_inset Newline newline
\end_inset

weightFcn <- function(distance, win)  {
\begin_inset Newline newline
\end_inset

weight <- 1 - distance/weight
\begin_inset Newline newline
\end_inset

return(weight)
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Session information
\end_layout

\begin_layout Scrap
<<sessionInfo>>=
\begin_inset Newline newline
\end_inset

sessionInfo()
\begin_inset Newline newline
\end_inset

@
\end_layout

\end_body
\end_document
