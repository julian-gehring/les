%% LyX 1.6.5 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[english]{article}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{babel}

\usepackage[numbers]{natbib}
\usepackage[unicode=true, pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=true,pdfborder={0 0 0},backref=false,colorlinks=false]
 {hyperref}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
%\VignetteIndexEntry{Introduction to the les package: Identifying Loci of Enhanced Significance in Tiling Array Data}
%\VignettePackage{les}

%\usepackage{fancyvrb}
%\fvset{listparameters={\setlength{\topsep}{0pt}}}

\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}

\makeatother

\begin{document}

\title{Introduction to the les package:\\
Identifying Loci of Enhanced Significance in Tiling Array Data}


\author{Julian Gehring}
\maketitle
\begin{abstract}
In this vignette we describe using the \Rpackage{les} package for
finding Loci of Enhanced Significance (LES) in tiling microarray data.
With an example of a general framework we illustrate how to apply
the package for exploring regions of regulation with differential
design experiments.
\end{abstract}

\section{Introduction}

Tiling microarrays have become an important platform for the investigation
of regulation in expression and DNA-protein interaction. Due to their
lower bias towards annotation compared to other microarray platforms
they provide an powerful tool for biological research.

Beside the analysis of single microarrays the investigation of differential
effects between experimental conditions is important for current research.
A common approach consists in applying some suitable statistical tests
on the level of single probes and thereby computing p-values $p_{i}$
for each probe $i$ independently. Since the targets of such experiments
cover regions with several probes a reasonable next step involves
combining information from neighboring probes. Many approaches use
a smoothing window to obtain this. While these methods may work well
most of them produce a feature that lacks any statistical interpretation.

In regions with differential effects the test statistics change their
distribution and are referred to as \emph{Loci of Enhanced Significance
(LES)}. The changes in the test statistics depend on the underlying
test applied.

The \Rpackage{les} package provides the ability to detect such LES
independent of the underlying statistical test and can therefore be
used for a wide range of applications. This vignette illustrates how
LES can be found in tiling microarray data sets.

<<echo=false>>=
options(width=65)
@


\section{Data and statistics on probe level}

For this analysis we will use a simulated data set describing differential
expression between two conditions.

Please note that this data does not reflect real biological data.
It is rather meant to illustrate the workflow than to provide real
life data.

The data set contains 1000 probes with 3 chips each for the conditions
treatment and control. The expression values are stored in an expression
set. We will extract the position of the probes, the conditions of
the samples and the expression values. There are two regions of regulation
present in the data each 50 bp long.

<<loadData>>=
library(les)
library(Biobase)
data(simTile)
treatment <- as.factor(phenoData(simTile)$condition == "treatment")
pos <- featureData(simTile)$position
exprs <- exprs(simTile)
regions <- c(100, 150, 600, 650)
cols <- rep(c("lightblue3", "lightgreen"), each=2)
@

Next we have a look at the expression values.

<<plotExpressionValues, fig=TRUE, echo=TRUE>>=
matplot(exprs, pch=".", xlab="Probe position", ylab="Expression")
abline(v=regions, col=cols)
@

In the next step we will compute the statistics of changes between
the two conditions for each probe. Since the sample size as for most
tiling microarray experiments is small we will use a modified t-test
provided by the \Rpackage{les} package.\citep{smyth_limma:_2005}

We will also plot the p-values $p_{i}$ against the probe positions
$i$. By looking at the raw p-values it may be hard to detect the
\emph{LES}.

<<estimateProbeLevelStatistics>>=
library(limma)
design <- cbind(mean=1, diff=treatment)
fit <- lmFit(exprs, design)
fit <- eBayes(fit)
pval <- as.numeric(fit$p.value[, "diff"])
@

<<plotProbeLevelStatistics, fig=TRUE, echo=TRUE>>=
plot(pos, pval, pch=20, xlab="Probe position", ylab="P-value")
abline(v=regions, col=cols)
@


\section{Incorporation information from neighboring p-values}

In any well designed tiling array experiments the potential targets
will cover several neighboring probes. Thereby neighboring p-values
should contain mutual information and incorporation of such will be
beneficial.

In the \Rpackage{les} package this in done in the following manner:
For each probe $i$ the the surrounding p-values $p_{i}$ get weights
assigned by a windowing function. A weighted cumulative density is
then computed and the fraction of significant $p_{i}$ is estimated
by iterative linear fitting. The method is based on the fact that
p-values under the null hypothesis $H_{0}$ come from a uniform distribution
whereas p-values violating $H_{0}$ are shifted towards smaller values.\citep{bartholom_estimation_2009}
This results in the index $\Lambda_{i}$ which measures the fraction
of p-values violating $H_{0}$ in the window and therefore the degree
of regulation in the local surrounding. It should be noted that this
approach is closely related to the estimation of a false discovery
rate and $\Lambda_{i}$ can be interpreted in a similar way.

For the analysis we will first store our data in an object of class
\Rclass{Les} by calling the \Rfunction{create} function. The only
data required for the analysis are the position of the probes $i$,
the corresponding p-values $p_{i}$ from the statistical test and
optionally their chromosomal location.

<<createLes>>=
res <- create(pos, pval)
@

Then we can compute our first estimate of $\Lambda_{i}$ for which
we have to specify a window size. The power of the detection will
be high if the size of the window matches the size of the target.
In many experiments a rough prior knowledge on the target size is
available which will be sufficient of the first step. Here we will
chose a small window size to start with.

By default a triangular weighting function will be chosen. We can
also take a rectangular window or write our own function and pass
it via the weighting argument. We can further on specify whether we
want to include the Grenander correction for the cumulative density
or use multicore processing on some platforms.

<<estimateLes>>=
win <- 30
res <- estimate(res, win)
@

All data, results and parameters are now stored in the object named
\Robject{res}. We can get a short summary on the results by calling
\Rmethod{print}, \Rmethod{summary} or by plotting it.

<<showPlotLes, fig=TRUE, echo=TRUE>>=
res
plot(res)
abline(v=regions, col=cols)
@

For comparison we will analyze and plot the same data with a different
window size. This allows us to explore our data set.

<<estimateLes2>>=
win2 <- 50
res <- estimate(res, win2)
@

<<showPlotLes2, fig=TRUE, echo=TRUE>>=
res
plot(res)
abline(v=regions, col=cols)
@

We can already see two distinct peaks that correspond well to the
simulated regions of regulation.

The \Rmethod{plot} method provides additional arguments that help
customizing the figure.


\section{Parameter estimation from the data}

To turn the continuous $\Lambda_{i}$ into distinct regions of interest
we have to define a threshold $\Theta$. It can be derived from the
data by estimating the number of probes with a significant effect
$R$ on the whole array. Then $\Theta$ can be chosen such that $\mid\Lambda_{i}\geq\Theta\mid=R$.
The content of any slot can be accessed by using the \Rmethod{[}-method.

<<threshold>>=
res <- threshold(res, grenander=TRUE, verbose=TRUE)
@

Based on $\Theta$ we can search for regions that have a continuous
$\Lambda_{i}\geq\Theta$. The \Rmethod{regions} method takes by default
the estimated $\hat{\Theta}$ as shown before. We can also pass our
own estimate for $\Theta$ with the \Rfunarg{limit} argument. Further
restrictions can be imposed on the regions search such as the minimal
length of a region and the maximum gap allowed between probes of one
region.

A data frame with the estmated regions can be accessed with the \Rmethod{[}-method.
This can also be used to access any other data slot of a \Robject{LES}
object.

<<regions>>=
theta <- 0.3
res <- regions(res, limit=theta, verbose=TRUE)
res
res["regions"]
@

<<plotRegions, fig=TRUE, echo=TRUE>>=
region <- res["regions"]
borders <- c(region$start, region$end)
plot(res)
abline(v=regions, col=cols)
abline(v=borders, col="darkgray", lty=2)
@


\section{Calculation of confidence intervals}

In some cases it is also useful to provide confidence (CI) intervals
for $\Lambda_{i}$. These are computed by bootstrapping the probes
in the window. Since bootstrapping is by its nature computationally
demanding and CI are primarily interesting in regions of interest
it it possible to compute CIs for a subset of probes and to specify
the number of bootstraps.

<<ci>>=
subset <- pos >= 580 & pos <= 670
res <- ci(res, subset, nBoot=50)
@

<<plotCi, fig=TRUE, echo=TRUE>>=
plot(res, error="ci", limit=theta, xlim=c(580, 670))
@


\section{Plotting capabilities}

The \Rmethod{plot} method provides many options for customizing result
graphics.

The following command plots a smaller region of the chromosome with
confidence intervals. Additionally the estimated regions, the position
of probes are shown.

<<plotOptions, fig=TRUE, echo=TRUE>>=
plot(res, error="ci", region=TRUE, rug=TRUE, rugSide=3, main="LES for simulated data", probePch=NA, sigCol="lightblue", xlim=c(50, 200), limit=FALSE)
#plot(res, error="ci", region=TRUE, rug=TRUE, rugSide=3, main="LES for simulated data", #probePch=NA, sigCol="lightblue", xlim=c(50, 200))
@


\section{Exporting result to external software}

In some cases it can be useful to analyze results of this analysis
in other software than R alone. For this purpose both the estimated
regions as well as $\Lambda$ can be saved to a file with the \Rmethod{export}
method. Available formats for the regions are the \emph{bed} and \emph{gff},
for $\Lambda$ \emph{wig}. Since these formats are widely used they
can be directly loaded into many genome software packages and browsers.


\section{Specification of own window functions}

With the \Rfunction{triangWeight}, \Rfunction{rectangWeight}and
\Rfunction{gaussWeight} three window functions are already include
in the \Rpackage{les} package. We can also specify own window functions
and pass it via the \Rfunarg{weighting} argument in the \Rmethod{estimate}
method. They have to be specified in the following format, here described
with a triangular weighting.

<<weightFcn>>=
weightFcn <- function(distance, win)  {
weight <- 1 - distance/weight
return(weight)
}
@

\newpage{}

\bibliographystyle{plainnat}
\bibliography{ref_les}



\section*{Session information}

<<sessionInfo, results=tex, echo=FALSE>>=
toLatex(sessionInfo(), locale=FALSE)
@
\end{document}
